plugins{
    id 'java'
    id 'dev.architectury.loom' version '0.8.0-SNAPSHOT' apply false //Forge loom :D
    id "architectury-plugin" version "3.2-SNAPSHOT" apply false
    id "com.github.johnrengelman.shadow" version "7.0.0" apply false
    //id "com.dorongold.task-tree" version "1.5" Current version doesn't support gradle 6.8

    id 'com.matthewprenger.cursegradle' version '1.4.0' apply false
    id "com.github.breadmoirai.github-release" version "2.2.12"
    id "com.modrinth.minotaur" version "1.2.1"
}


allprojects {

    repositories {
        maven{
            name = "TerraformersMC maven"
            url = 'https://maven.terraformersmc.com/'
        }
        maven {
            url "https://libraries.minecraft.net"
        }
    }

    tasks.withType(JavaCompile).configureEach {

        //apply plugin: "architectury-plugin"

        def targetVersion = project.java_version
        sourceCompatibility = JavaVersion.toVersion(targetVersion)
        targetCompatibility = JavaVersion.toVersion(targetVersion)

        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true	//deprecated warning on compile
        repositories {
            mavenCentral()
        }
        dependencies {
            // put common dependencies here
            compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
        }
    }

}

//---------------- Publishing ----------------

ext.isRelease = false;
ext.cfType = project.isRelease ? "release" : "alpha"
ext.changes = " Server-side emotes, will be streamed to clients"


import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType

List<File> releaseArtifacts

ext.keysExists = file("keys.properties").exists();

if(keysExists) {
    println("Keys file exists, loading publish scripts")
    file("keys.properties").withReader {
        Properties props = new Properties()
        props.load(it)
        project.ext.keys = props
    }

    task publishModrinth(type: TaskModrinthUpload) {
        if(project.isRelease){
            versionType = VersionType.RELEASE
        }
        else{
            versionType = VersionType.ALPHA
        }
        token = project.keys.modrinth_token;
        // Get the GitHub Access Token you got from the basics part of this tutorial.
        projectId = "pZ2wrerK" // Enter your modrinth mod ID here.
        //System.out.println("Enter the version number:");
        versionNumber = "${project.mod_version}"
        versionName = "${project.mod_version}"
        //uploadFile = releaseArtifacts.get(0)
        //additionalFiles = releaseArtifacts.subList(1, releaseArtifacts.size())
                           //"forge/build/libs/emotecraft-for-MC${project.minecraft_version}-${project.mod_version}-forge.jar"]
        //uploadFile = tasks.fabric.remapJar
        //System.out.println("Enter the game version number: (See minotaur docs for valids)");
        addGameVersion('1.16.5');
        addGameVersion('1.17');
        changelog = changes;
        addLoader("fabric")
        addLoader("forge")
        failSilently = false
        doLast {
            uploadFile = releaseArtifacts.get(0)
            additionalFiles = releaseArtifacts.subList(1, releaseArtifacts.size())
        }
    }


    githubRelease {
        token project.keys.github_token // This is your personal access token with Repo permissions
        // You get this from your user settings > developer settings > Personal Access Tokens
        owner "KosmX"
        // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
        repo "emotes" // by default this is set to your project name
        tagName "${project.mod_version}" // by default this is set to "v${project.version}"
        targetCommitish "dev" // by default this is set to "master"
        releaseName "Emotecraft-${project.mod_version}" // Release title, by default this is the same as the tagName
        body changes // by default this is empty
        draft false // by default this is false
        prerelease !isRelease // by default this is false
        //releaseAssets = releaseArtifacts
        // this points to which files you want to upload as assets with your release
        //releaseAssets jar.destinationDir.listFiles
        overwrite true // by default false; if set to true, will delete an existing release with the same tag and name
        dryRun false // by default false; you can use this to see what actions would be taken without making a release
        apiEndpoint "https://api.github.com" // should only change for github enterprise users
        client // This is the okhttp client used for http requests
    }


    task autoPublish {
        //dependsOn(':forge:build',)
        //dependsOn(':fabric:build', ':bukkit:build')
        dependsOn('collectArtifacts')

        //Configure Modrinth and GitHub with artifacts to release
        doFirst {
            tasks.githubRelease.releaseAssets = releaseArtifacts
            tasks.publishModrinth.uploadFile = releaseArtifacts.get(0)
            tasks.publishModrinth.additionalFiles = releaseArtifacts.subList(1, releaseArtifacts.size())
        }

        finalizedBy(tasks.githubRelease)
        finalizedBy(publishModrinth)

        finalizedBy(':16:publishToCF')
        finalizedBy(':17:publishToCF')

    }
}
else {
    println("Keys file is not exists publishing is not possible")
}

//Build all modules task :D
task buildAll{
    dependsOn(':bukkit:build')
    dependsOn(':16:buildAll', ':17:buildAll')
}

task cleanupArtifacts{
    doLast {
        delete "${project.projectDir}/artifacts"
    }
}

task collectArtifacts{
    dependsOn('cleanupArtifacts')
    dependsOn(':bukkit:copyArtifacts')
    dependsOn(':16:copyArtifacts', ':17:copyArtifacts')
    doLast {
        releaseArtifacts = project.getProjectDir().toPath().resolve("artifacts").toFile().listFiles()
    }
}

clean{
    delete "${project.projectDir}/artifacts"
}

