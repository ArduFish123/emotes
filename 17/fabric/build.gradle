
plugins {
    //id 'forgified-fabric-loom' version '0.6-SNAPSHOT' //Forge loom :D
    //id "architectury-plugin" version "3.0-SNAPSHOT"
    id 'maven-publish'
}

apply plugin: 'com.github.johnrengelman.shadow'

apply plugin: 'dev.architectury.loom'
apply plugin: 'architectury-plugin'
architectury{
    platformSetupLoomIde()
    fabric()
    minecraft = project.minecraft_version

}

loom{
    silentMojangMappingsLicense()
}



archivesBaseName = "${project.archives_base_name}-for-MC${project.minecraft_version}"
version = project.mod_version
group = project.maven_group


minecraft {
    accessWidener = file("src/main/resources/emotes.accesswidener")
}
configurations {
    compileModule
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()


    implementation project(':executor')
    implementation project(':emotesAPI')
    implementation project(':emotesServer')

    implementation(project(path: ":${project.module_name}:archCommon"))
    implementation project(':emotesMain')
    developmentFabric(project(path: ":emotesMain")) { transitive = false }
    developmentFabric(project(path: ":${project.module_name}:archCommon")) { transitive = false }

    compileModule(project(path: ":${project.module_name}:archCommon", configuration: "transformProductionFabric")) { transitive = false }
    compileModule(project(':emotesMain')){ transitive = false }
    compileModule project(':executor')
    compileModule project(':emotesAPI')
    compileModule(project(':emotesServer')){ transitive = false }


    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}"){
        exclude group: "net.fabricmc.fabric-api"
    }
    include "com.terraformersmc:modmenu:${project.modmenu_version}"


    modImplementation "io.github.kosmx:bendy-lib:${project.bendylib_version}"
    include "io.github.kosmx:bendy-lib:${project.bendylib_version}"

}

tasks.withType(JavaCompile){
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true	//deprecated warning on compile
}


processResources {
    inputs.property "version", project.version
    inputs.property "description", rootProject.mod_description

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "description": rootProject.mod_description
    }
}


// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}

shadowJar{
    configurations = [project.configurations.compileModule]
    classifier "fabric-dev"
}

remapJar{
    dependsOn shadowJar
    input.set shadowJar.archiveFile
    classifier "fabric"
}

jar {
    //from {
    //    configurations.compileModule.collect { it.isDirectory() ? it : zipTree(it) }
    //}
    from "LICENSE"
}



// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(jar) {
                builtBy remapJar
            }
            //artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar"){
            //	builtBy remapJar
            //}
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        mavenLocal()
    }
}
