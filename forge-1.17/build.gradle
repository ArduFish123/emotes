buildscript {
    repositories {
        maven{
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
plugins {
    id 'java'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

//apply plugin: 'com.github.johnrengelman.shadow'

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

repositories {
    mavenCentral()
}

minecraft {
    mappings channel: 'official', version: '1.17.1'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }

            arg "-mixin.config=emotecraft.mixins.json, bendylib.mixin.json"
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
            arg "-mixin.config=emotecraft.mixins.json, bendylib.mixin.json"
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
        accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    }

}

sourceSets.main.resources {srcDir 'src/generated/resources' }

configurations {
    compileModule
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"


    implementation project(':executor')
    implementation project(':emotesAPI')
    implementation project(':emotesServer')

    implementation(project(path: ":17:archCommon")) { transitive = false}
    implementation project(':emotesMain')
    //implementation(project(path: ":emotesMain")) { transitive = false }
    compileModule(project(path: ":17:archCommon")) { transitive = false }
    compileModule(project(':emotesMain')){ transitive = false }
    compileModule(project(':executor')){ transitive = false }
    compileModule(project(':emotesAPI')){ transitive = false }
    compileModule(project(':emotesServer')){ transitive = false }


    //Until Forge learns to do it.
    annotationProcessor "org.spongepowered:mixin:0.8.4:processor"
}
jar {
    manifest {
        attributes([
                "Specification-Title"     : "emotes",
                "Specification-Vendor"    : "emotecraft",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "emotecraft",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "emotecraft.mixins.json, bendylib.mixin.json"
        ])
    }

    from {
        configurations.compileModule.collect { it.isDirectory() ? it : zipTree(it) }
    }
    //Like shadow just without killing refmap task
}

jar.finalizedBy('reobfJar')

processResources {
    inputs.property "version", project.version
    inputs.property "description", rootProject.mod_description

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version, "description": rootProject.mod_description
    }
}

tasks.withType(JavaCompile) {
    it.options.encoding = "UTF-8"
}

/*
shadowJar {
    configurations = [project.configurations.compileModule]
    classifier 'dev'
}

 */


mixin{
    add sourceSets.main, "emotecraft.refmap.json"
    //add sourceSets.main, "bendylib.refmap.json"
}