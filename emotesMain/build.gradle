plugins {
    id 'java'
    id 'maven-publish'
    //id 'forgified-fabric-loom' version '0.6-SNAPSHOT' //Forge loom :D
    //id "architectury-plugin" version "3.0-SNAPSHOT"
}

//apply plugin: 'dev.architectury.loom'
//apply plugin: "architectury-plugin"
//apply plugin: 'com.github.johnrengelman.shadow'

version project.mod_version


repositories {
    mavenCentral()
}

configurations {
    compileModule
    dev
}

dependencies {
    implementation project(':emotesAPI')
    implementation project(':executor')
    implementation project(':emotesServer')
    compileModule project(':emotesAPI')
    compileModule project(':executor')
    compileModule project(':emotesServer')

    compileOnly "com.google.code.gson:gson:2.8.0"//That package is compiled into MC
}

tasks.withType(Copy){
    eachFile{
        rename{
            String filename->filename = filename.toLowerCase()
        }
        //Rename every file to lowercase. This is essential for the translations to work
        //Possibly creates other problems on other operating systems
    }
}
/*
shadowJar{
    configurations = [project.configurations.compileModule]
    classifier ""
}


 */
//remapJar{
//    dependsOn shadowJar
//    input.set shadowJar.archiveFile
//}

jar{
   from {
       configurations.compileModule.collect { it.isDirectory() ? it : zipTree(it) }
   }
}

artifacts {
    dev(jar)
}

task sourcesJar(type: Jar, dependsOn: classes){
    classifier "sources"
    from sourceSets.main.allSource
}


publishing{
    publications{
        maven(MavenPublication) {
            groupId = 'io.github.kosmx.emotes'
            artifactId = 'emotesMain'
            version = project.version

            //artifact(jar) {
            //    builtBy shadowJar
            //}
            //artifact(remapJar) {
            //    builtBy remapJar
            //}
            //artifact shadowJar
            artifact sourcesJar
            //from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}

/* This testing stuff could be useful later...
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

 */