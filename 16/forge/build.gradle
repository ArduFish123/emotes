plugins {
    //id 'fabric-loom' version '0.6-SNAPSHOT'
    //id 'forgified-fabric-loom' version '0.6-SNAPSHOT' //Forge loom :D
    //id "architectury-plugin" version "3.0-SNAPSHOT"
    id 'maven-publish'
}


apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.modrinth.minotaur'

architectury{
    platformSetupLoomIde()
    forge()
}

//Import jfrog keys from file (not included in the git repo :D)
//and well... serialize it
repositories{
    mavenLocal()
    //jcenter()
}

project.java

archivesBaseName = "${project.archives_base_name}-for-MC${project.minecraft_version}"
version = project.mod_version
group = project.maven_group

configurations {
    compileModule
}
loom{
    silentMojangMappingsLicense()
    forge {
        mixinConfig "emotecraft.mixins.json"
        mixinConfig "bendylib.mixin.json"
    }
}

dependencies {
    implementation project(':executor')
    implementation project(':emotesAPI')
    implementation project(':emotesServer')

    implementation project(':emotesMain')
    implementation(project(path: ":${project.module_name}:archCommon", configuration: 'dev')) { transitive = false}
    developmentForge(project(path: ":emotesMain")) { transitive = false }
    developmentForge(project(path: ":${project.module_name}:archCommon", configuration: 'dev')) { transitive = false }

    compileModule(project(':emotesMain')){ transitive = false }
    compileModule(project(path: ":${project.module_name}:archCommon", configuration: "transformProductionForge")){ transitive = false }


    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    //other dependency(ies)

    //modImplementation "pm.c7.perspective:PerspectiveModRedux:0.0.5"


    //compileOnly files("replaymod-1.16.4-2.5.1-2-g57c7362-dirty-dev.jar", "jGui-1.16.4-git-dev.jar")


    //Spigot stuff
    //implementation("org.spigotmc:spigot-api:${project.spigot_api}")//Spigot will be a different module...

    //runtime files("replaymod-1.16.4-2.5.1-2-g57c7362-dirty-dev.jar", "jGui-1.16.4-git-dev.jar")

}

processResources {
    inputs.property "version", project.version
    inputs.property "description", rootProject.mod_description

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version, "description": rootProject.mod_description
    }
}


// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    it.options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

shadowJar{
    configurations = [project.configurations.compileModule]
    classifier "forge-dev"
}

remapJar{
    dependsOn shadowJar
    input.set shadowJar.archiveFile
    classifier "forge"
}

jar {
    classifier "dev"
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
    //from {
    //    configurations.compileModule.collect { it.isDirectory() ? it : zipTree(it) }
    //}
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(jar) {
                builtBy remapJar
            }
            //artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar"){
            //	builtBy remapJar
            //}
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        mavenLocal()
    }
}


import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType

if(keysExists) {
    task publishModrinth(type: TaskModrinthUpload) {
        if(project.isRelease){
            versionType = VersionType.RELEASE
        }
        else if(project.cfType == "beta") {
            versionType = VersionType.BETA
        }
        else {
            versionType = VersionType.ALPHA
        }

        token = project.keys.modrinth_token;
        // Get the GitHub Access Token you got from the basics part of this tutorial.
        projectId = "pZ2wrerK" // Enter your modrinth mod ID here.
        //System.out.println("Enter the version number:");
        versionNumber = "${project.mod_version}"
        versionName = "${project.mod_version}"

        addGameVersion('1.16.5');
        changelog = changes;
        addLoader("forge")
        failSilently = false
        doLast {
            uploadFile = remapJar
        }
    }
}
